Author: Aaron Lim

File: maxrefdes117_software_doc.txt

Project: WAFR - Wearable Alert for First Responders
		 Senior Design Project

Organization: University of Rochester
			  Dept. of Electrical & Computer Engineering

Description: Documentation for the software that drives the
			 MAXREFDES117 pulse oximeter breakout board

Date: 4 April 2017


TABLE OF CONTENTS
-----------------
Introduction

max30102_wire_driver.h

max30102_wire_driver.cpp

max30102_processing.h

max30102_processing.cpp


Introduction
------------
The software described in this document is used to interface the MAXREFDES117 pulse oximetry breakout board (from Maxim Integrated) with the Arduino microcontroller platform. The MAXREFDES117 includes the MAX14595 level translator, the MAX1921 step-down converter, and the MAX30102 heart rate and spo2 sensor. For this specific project, we used the Adafruit Flora board which utilizes the Atmega32u4 microcontroller. Other Arduino compatible boards can be used, but one must keep track of memory constraints. All communication with the MAX30102 heart rate and spo2 sensor is done over I2C using the Arduino Wire library. This software can be rewritten to use other I2C libraries compatible with the Arduino platform.


max30102_wire_driver.h and max30102_wire_driver.cpp
---------------------------------------------------
These files are used to define all of the important registers and functions needed to interface with the MAX30102 heart rate and spo2 sensor over I2C using the Wire library. These files were adapted from the MAX30102 driver software provided by Maxim Integrated.


+ Dependencies: 

	Arduino.h
	TinyWireM.h
	USI_TWI_Master.h
	Wire.h


+ Definitions:

	REG_INTR_STATUS_1 - address of interrupt status register 1
	REG_INTR_STATUS_2 - address of interrupt status register 2
	REG_INTR_ENABLE_1 - address of interrupt enable register 1
	REG_INTR_ENABLE_2 - address of interrupt enable register 2
	REG_FIFO_WR_PTR - address of the fifo write pointer
	REG_OVF_COUNTER - address of the fifo overflow counter register
	REG_FIFO_RD_PTR - address of the fifo read pointer
	REG_FIFO_DATA - address of the fifo data register
	REG_FIFO_CONFIG - address of the fifo configuration bits
	REG_MODE_CONFIG - address of the system mode configuration bits
	REG_SPO2_CONFIG - address of the spo2 configuration bits
	REG_LED1_PA - address of register to control red LED pulse amplitude
	REG_LED2_PA - address of register to control IR LED pulse amplitude
	REG_PILOT_PA - address of register to control LED's while in proximity mode
	REG_MULTI_LED_CTRL1 - address of register to control timing of multi-LED mode
	REG_MULTI_LED_CTRL2 - address of register to control timing of multi-LED mode
	REG_TEMP_INTR - address of register that holds the integer value of the temperature ADC
	REG_TEMP_FRAC - address of register that holds the fraction value of the temperature ADC
	REG_TEMP_CONFIG - address of register used to enable a temperature reading
	REG_PROX_INT_THRESH - address of register used to set the proximity threshold for entering HR or spo2 mode
	REG_REV_ID - address of register that holds the revision ID
	REG_PART_ID - address of register that holds the part ID


+ Functions:

max30102_read_reg(byte reg)

	Return Type: byte - data held in register <reg>

	Arguments: reg - byte - The address of the register to read

	Description: Reads one byte from a register


max30102_write_reg(uint8_t addr, uint8_t data)

	Return Type: NONE

	Arguments: addr - uint8_t - The address of the register to write to
			   data - uint8_t - The byte to write to register <reg>

	Description: Writes one byte to a register


max30102_set_reg_ptr(uint8_t addr)

	Return Type: NONE

	Arguments: addr - uint8_t - address to point to

	Description: Sets the MAX30102 register pointer to a specified register


max30102_read_fifo(uint32_t *read_buffer, uint32_t *ir_buffer, uint8_t idx)

	Return Type: bool - whether the read was successful or not

	Arguments: red_buffer - uint32_t* - array to hold red LED data
			   ir_buffer - uint32_t* - array to hold IR LED data
			   idx - uint8_t - index at which data is placed in red_buffer and ir_buffer

	Description: Data is read from the FIFO buffer and placed in the red_buffer and ir_buffer arrays. Each sample is six (6) bytes, three for red and three for ir.


max30102_init(void)

	Return Type: NONE

	Arguments: NONE

	Description: Initializes important registers to define the operating characteristics of the MAX30102 sensor


max30102_clear_interrupt_status_regs(void)

	Return Type: NONE

	Arguments: NONE

	Description: Performs a read of the interrupt status registers, which also clears them


max30102_reset(void)

	Return Type: NONE

	Arguments: NONE

	Description: Resets the MAX30102 sensor by writing 0x40 to the mode config register


max30102_processing.h and max30102_processing.cpp
-------------------------------------------------
These files are used to process the data gathered from the MAX30102 in order to calculate heart rate and spo2.


+ Dependencies:

	Arduino.h


+ Definitions:

	FS - Sampling Frequency
	DATA_WIN_SECS - window of data gathered at one time, in units of seconds
	BUFFER_SIZE - number of samples to process at once
	MVG_AVG_SIZE - size of the moving average filter
	MAX_NUM_PEAKS - maximum allowed peaks in a data window to resolve a HR of 225bpm
	MIN_PEAK_WIDTH - minimum distance between peaks to distinguish heart beats from noise
	INITIAL_SAMPLE_SIZE - number of loops to initially fill the hr and spo2 buffers
	PEAKS_TO_HR(peaks) - converts the number of peaks counted to a heart rate


+ Constants

	tmp_ir[ BUFFER_SIZE ] - array to process IR LED data without affecting the original set
	tmp_red[ BUFFER_SIZE ] - array to process red LED data without affecting the original set


+ Functions:

get_num_peaks(uint32_t *ir_buffer)

	Return Type: uint32_t - number of peaks in ir_buffer array

	Arguments: ir_buffer - uint32_t* - array of IR LED samples

	Description: Counts the number of peaks in one sample set of IR LED data.



get_spo2_ratio(uint32_t *red_buffer, uint32_t *ir_buffer)

	Return Type: float - ratio of (red_ac/red_dc)/(ir_ac/ir_dc) for spo2 calculation

	Arguments: red_buffer - uint32_t* - array of red LED data
			   ir_buffer - uint32_t* - array of IR LED data

	Description: Calculates the ratio of ratios of the red and IR data. This value will be used to calculate the spo2 based on a calibrated curve that should be obtained from medical test equipment.


peaks_above_min_height(int32_t *ir_locs, uint32_t *num_peaks, int32_t *tmp_ir, uint32_t threshold, uint32_t max_num_peaks)

	Return Type: NONE

	Arguments: ir_locs - array to hold locations (indices) of peaks above a threshold
			   num_peaks - number of peaks found in function get_num_peaks(...)
			   tmp_ir - sample set of pre-processed (smoothed) IR data
			   threshold - amplitude threshold for peaks
			   max_num_peaks - maximum allowed number of peaks

	Description: Locates all peaks above a threshold in the processed (smoothed) IR data array, and places their indices in the ir_locs array


remove_close_peaks(int32_t *tmp_ir, int32_t *ir_locs, uint32_t *num_peaks, uint32_t min_width)

	Return Type: 

	Arguments:

	Description:


sort_ascending(int32_t *arr, uint32_t len)

	Return Type:

	Arguments:

	Description:


sort_descending(int32_t *arr, uint32_t len)

	Return Type:

	Arguments:

	Description:


EOF
